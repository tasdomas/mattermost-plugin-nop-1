package main

import (
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
)

func TestGenerator(t *testing.T) {
	suite.Run(t, new(GeneratorTestSuite))
}

type GeneratorTestSuite struct {
	suite.Suite
}

func (s *GeneratorTestSuite) TestLoadSimplePackage() {
	t := s.T()

	pkgPath := "github.com/mattermost/mattermost-plugin-nop/tools/testdata.Simple"
	pkgName, ifaceName, err := parseInterfacePath(pkgPath)
	assert.Nil(t, err)
	assert.Equal(t, "github.com/mattermost/mattermost-plugin-nop/tools/testdata", pkgName)
	assert.Equal(t, "Simple", ifaceName)

	cwd, _ := os.Getwd()

	pkg, err := getPackage(pkgName, cwd)
	assert.Nil(t, err)
	assert.NotNil(t, pkg)

	iface, err := pkg.findInterfaceDeclaration(ifaceName)
	assert.Nil(t, err)
	assert.NotNil(t, iface)

	methods, imports, err := pkg.getInterfaceMethods(iface)
	assert.Nil(t, err)
	assert.Len(t, methods, 1)
	assert.Len(t, imports, 0)

	// Generate the implementation file.
	expected := `package p

// Code generated by ./tools/generate.go; DO NOT EDIT.

type SimpleImpl struct{}

func (SimpleImpl) Run(a int, b string) (_ error) {
	return
}
`

	result, err := pkg.generatePackage("p", "SimpleImpl", methods, collectImports(imports))
	assert.Nil(t, err)
	assert.Equal(t, result, []byte(expected))
}

func (s *GeneratorTestSuite) TestLoadComplexPackage() {
	t := s.T()

	pkgPath := "github.com/mattermost/mattermost-plugin-nop/tools/testdata.Complex"
	pkgName, ifaceName, err := parseInterfacePath(pkgPath)
	assert.Nil(t, err)

	cwd, _ := os.Getwd()
	cwd = filepath.Dir(cwd)

	pkg, err := getPackage(pkgName, cwd)
	assert.Nil(t, err)

	iface, err := pkg.findInterfaceDeclaration(ifaceName)
	assert.Nil(t, err)

	methods, imports, err := pkg.getInterfaceMethods(iface)
	assert.Nil(t, err)

	// Generate the implementation file.
	expected := `package p

// Code generated by ./tools/generate.go; DO NOT EDIT.

import (
	"bytes"
	"github.com/mattermost/mattermost-server/v5/model"
	"github.com/mattermost/mattermost-plugin-nop/tools/testdata"
)

type ComplexImpl struct{}

func (ComplexImpl) A() {
	return
}

func (ComplexImpl) B(a int, b string) (_ testdata.C, _ error) {
	return
}

func (ComplexImpl) C(a *bytes.Buffer, b []byte) (_ []byte, _ error) {
	return
}

func (ComplexImpl) D(_ *model.CommandArgs) (_ error) {
	return
}
`

	result, err := pkg.generatePackage("p", "ComplexImpl", methods, collectImports(imports))
	os.Stdout.Write(result)
	assert.Nil(t, err)
	assert.Equal(t, result, []byte(expected))
}
